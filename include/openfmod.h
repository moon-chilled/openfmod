#ifndef OPENFMOD_H
#define OPENFMOD_H

typedef enum FMOD_RESULT {
	FMOD_OK,
	FMOD_ERR_BADCOMMAND,
	FMOD_ERR_CHANNEL_ALLOC,
	FMOD_ERR_CHANNEL_STOLEN,
	FMOD_ERR_DMA,
	FMOD_ERR_DSP_CONNECTION,
	FMOD_ERR_DSP_DONTPROCESS,
	FMOD_ERR_DSP_FORMAT,
	FMOD_ERR_DSP_INUSE,
	FMOD_ERR_DSP_NOTFOUND,
	FMOD_ERR_DSP_RESERVED,
	FMOD_ERR_DSP_SILENCE,
	FMOD_ERR_DSP_TYPE,
	FMOD_ERR_FILE_BAD,
	FMOD_ERR_FILE_COULDNOTSEEK,
	FMOD_ERR_FILE_DISKEJECTED,
	FMOD_ERR_FILE_EOF,
	FMOD_ERR_FILE_ENDOFDATA,
	FMOD_ERR_FILE_NOTFOUND,
	FMOD_ERR_FORMAT,
	FMOD_ERR_HEADER_MISMATCH,
	FMOD_ERR_HTTP,
	FMOD_ERR_HTTP_ACCESS,
	FMOD_ERR_HTTP_PROXY_AUTH,
	FMOD_ERR_HTTP_SERVER_ERROR,
	FMOD_ERR_HTTP_TIMEOUT,
	FMOD_ERR_INITIALIZATION,
	FMOD_ERR_INITIALIZED,
	FMOD_ERR_INTERNAL,
	FMOD_ERR_INVALID_FLOAT,
	FMOD_ERR_INVALID_HANDLE,
	FMOD_ERR_INVALID_PARAM,
	FMOD_ERR_INVALID_POSITION,
	FMOD_ERR_INVALID_SPEAKER,
	FMOD_ERR_INVALID_SYNCPOINT,
	FMOD_ERR_INVALID_THREAD,
	FMOD_ERR_INVALID_VECTOR,
	FMOD_ERR_MAXAUDIBLE,
	FMOD_ERR_MEMORY,
	FMOD_ERR_MEMORY_CANTPOINT,
	FMOD_ERR_NEEDS3D,
	FMOD_ERR_NEEDSHARDWARE,
	FMOD_ERR_NET_CONNECT,
	FMOD_ERR_NET_SOCKET_ERROR,
	FMOD_ERR_NET_URL,
	FMOD_ERR_NET_WOULD_BLOCK,
	FMOD_ERR_NOTREADY,
	FMOD_ERR_OUTPUT_ALLOCATED,
	FMOD_ERR_OUTPUT_CREATEBUFFER,
	FMOD_ERR_OUTPUT_DRIVERCALL,
	FMOD_ERR_OUTPUT_FORMAT,
	FMOD_ERR_OUTPUT_INIT,
	FMOD_ERR_OUTPUT_NODRIVERS,
	FMOD_ERR_PLUGIN,
	FMOD_ERR_PLUGIN_MISSING,
	FMOD_ERR_PLUGIN_RESOURCE,
	FMOD_ERR_PLUGIN_VERSION,
	FMOD_ERR_RECORD,
	FMOD_ERR_REVERB_CHANNELGROUP,
	FMOD_ERR_REVERB_INSTANCE,
	FMOD_ERR_SUBSOUNDS,
	FMOD_ERR_SUBSOUND_ALLOCATED,
	FMOD_ERR_SUBSOUND_CANTMOVE,
	FMOD_ERR_TAGNOTFOUND,
	FMOD_ERR_TOOMANYCHANNELS,
	FMOD_ERR_TRUNCATED,
	FMOD_ERR_UNIMPLEMENTED,
	FMOD_ERR_UNINITIALIZED,
	FMOD_ERR_UNSUPPORTED,
	FMOD_ERR_VERSION,
	FMOD_ERR_EVENT_ALREADY_LOADED,
	FMOD_ERR_EVENT_LIVEUPDATE_BUSY,
	FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH,
	FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT,
	FMOD_ERR_EVENT_NOTFOUND,
	FMOD_ERR_STUDIO_UNINITIALIZED,
	FMOD_ERR_STUDIO_NOT_LOADED,
	FMOD_ERR_INVALID_STRING,
	FMOD_ERR_ALREADY_LOCKED,
	FMOD_ERR_NOT_LOCKED,
	FMOD_ERR_RECORD_DISCONNECTED,
	FMOD_ERR_TOOMANYSAMPLES
} FMOD_RESULT;

typedef enum FMOD_TAGTYPE {
	FMOD_TAGTYPE_UNKNOWN,
	FMOD_TAGTYPE_ID3V1,
	FMOD_TAGTYPE_ID3V2,
	FMOD_TAGTYPE_VORBISCOMMENT,
	FMOD_TAGTYPE_SHOUTCAST,
	FMOD_TAGTYPE_ICECAST,
	FMOD_TAGTYPE_ASF,
	FMOD_TAGTYPE_MIDI,
	FMOD_TAGTYPE_PLAYLIST,
	FMOD_TAGTYPE_FMOD,
	FMOD_TAGTYPE_USER,
	FMOD_TAGTYPE_MAX
} FMOD_TAGTYPE;

typedef enum FMOD_TAGDATATYPE {
	FMOD_TAGDATATYPE_BINARY,
	FMOD_TAGDATATYPE_INT,
	FMOD_TAGDATATYPE_FLOAT,
	FMOD_TAGDATATYPE_STRING,
	FMOD_TAGDATATYPE_STRING_UTF16,
	FMOD_TAGDATATYPE_STRING_UTF16BE,
	FMOD_TAGDATATYPE_STRING_UTF8,
	FMOD_TAGDATATYPE_MAX
} FMOD_TAGDATATYPE;

typedef enum FMOD_SOUND_FORMAT {
	FMOD_SOUND_FORMAT_NONE,
	FMOD_SOUND_FORMAT_PCM8,
	FMOD_SOUND_FORMAT_PCM16,
	FMOD_SOUND_FORMAT_PCM24,
	FMOD_SOUND_FORMAT_PCM32,
	FMOD_SOUND_FORMAT_PCMFLOAT,
	FMOD_SOUND_FORMAT_BITSTREAM,
	FMOD_SOUND_FORMAT_MAX
} FMOD_SOUND_FORMAT;

typedef enum FMOD_SOUND_TYPE {
	FMOD_SOUND_TYPE_UNKNOWN,
	FMOD_SOUND_TYPE_AIFF,
	FMOD_SOUND_TYPE_ASF,
	FMOD_SOUND_TYPE_DLS,
	FMOD_SOUND_TYPE_FLAC,
	FMOD_SOUND_TYPE_FSB,
	FMOD_SOUND_TYPE_IT,
	FMOD_SOUND_TYPE_MIDI,
	FMOD_SOUND_TYPE_MOD,
	FMOD_SOUND_TYPE_MPEG,
	FMOD_SOUND_TYPE_OGGVORBIS,
	FMOD_SOUND_TYPE_PLAYLIST,
	FMOD_SOUND_TYPE_RAW,
	FMOD_SOUND_TYPE_S3M,
	FMOD_SOUND_TYPE_USER,
	FMOD_SOUND_TYPE_WAV,
	FMOD_SOUND_TYPE_XM,
	FMOD_SOUND_TYPE_XMA,
	FMOD_SOUND_TYPE_AUDIOQUEUE,
	FMOD_SOUND_TYPE_AT9,
	FMOD_SOUND_TYPE_VORBIS,
	FMOD_SOUND_TYPE_MEDIA_FOUNDATION,
	FMOD_SOUND_TYPE_MEDIACODEC,
	FMOD_SOUND_TYPE_FADPCM,
	FMOD_SOUND_TYPE_OPUS,
	FMOD_SOUND_TYPE_MAX
} FMOD_SOUND_TYPE;

typedef enum FMOD_CHANNELORDER {
	FMOD_CHANNELORDER_DEFAULT,
	FMOD_CHANNELORDER_WAVEFORMAT,
	FMOD_CHANNELORDER_PROTOOLS,
	FMOD_CHANNELORDER_ALLMONO,
	FMOD_CHANNELORDER_ALLSTEREO,
	FMOD_CHANNELORDER_ALSA,
	FMOD_CHANNELORDER_MAX
} FMOD_CHANNELORDER;

typedef enum FMOD_DSP_TYPE {
	FMOD_DSP_TYPE_UNKNOWN,
	FMOD_DSP_TYPE_MIXER,
	FMOD_DSP_TYPE_OSCILLATOR,
	FMOD_DSP_TYPE_LOWPASS,
	FMOD_DSP_TYPE_ITLOWPASS,
	FMOD_DSP_TYPE_HIGHPASS,
	FMOD_DSP_TYPE_ECHO,
	FMOD_DSP_TYPE_FADER,
	FMOD_DSP_TYPE_FLANGE,
	FMOD_DSP_TYPE_DISTORTION,
	FMOD_DSP_TYPE_NORMALIZE,
	FMOD_DSP_TYPE_LIMITER,
	FMOD_DSP_TYPE_PARAMEQ,
	FMOD_DSP_TYPE_PITCHSHIFT,
	FMOD_DSP_TYPE_CHORUS,
	FMOD_DSP_TYPE_VSTPLUGIN,
	FMOD_DSP_TYPE_WINAMPPLUGIN,
	FMOD_DSP_TYPE_ITECHO,
	FMOD_DSP_TYPE_COMPRESSOR,
	FMOD_DSP_TYPE_SFXREVERB,
	FMOD_DSP_TYPE_LOWPASS_SIMPLE,
	FMOD_DSP_TYPE_DELAY,
	FMOD_DSP_TYPE_TREMOLO,
	FMOD_DSP_TYPE_LADSPAPLUGIN,
	FMOD_DSP_TYPE_SEND,
	FMOD_DSP_TYPE_RETURN,
	FMOD_DSP_TYPE_HIGHPASS_SIMPLE,
	FMOD_DSP_TYPE_PAN,
	FMOD_DSP_TYPE_THREE_EQ,
	FMOD_DSP_TYPE_FFT,
	FMOD_DSP_TYPE_LOUDNESS_METER,
	FMOD_DSP_TYPE_ENVELOPEFOLLOWER,
	FMOD_DSP_TYPE_CONVOLUTIONREVERB,
	FMOD_DSP_TYPE_CHANNELMIX,
	FMOD_DSP_TYPE_TRANSCEIVER,
	FMOD_DSP_TYPE_OBJECTPAN,
	FMOD_DSP_TYPE_MULTIBAND_EQ,
	FMOD_DSP_TYPE_MAX
} FMOD_DSP_TYPE;

typedef enum FMOD_DEBUG_MODE {
	FMOD_DEBUG_MODE_TTY,
	FMOD_DEBUG_MODE_FILE,
	FMOD_DEBUG_MODE_CALLBACK
} FMOD_DEBUG_MODE;

typedef enum FMOD_DSP_RESAMPLER {
	FMOD_DSP_RESAMPLER_DEFAULT,
	FMOD_DSP_RESAMPLER_NOINTERP,
	FMOD_DSP_RESAMPLER_LINEAR,
	FMOD_DSP_RESAMPLER_CUBIC,
	FMOD_DSP_RESAMPLER_SPLINE,
	FMOD_DSP_RESAMPLER_MAX
} FMOD_DSP_RESAMPLER;

typedef enum FMOD_CHANNELCONTROL_TYPE {
	FMOD_CHANNELCONTROL_CHANNEL,
	FMOD_CHANNELCONTROL_CHANNELGROUP,
	FMOD_CHANNELCONTROL_MAX,
} FMOD_CHANNELCONTROL_TYPE;

typedef enum FMOD_PLUGINTYPE {
	FMOD_PLUGINTYPE_OUTPUT,
	FMOD_PLUGINTYPE_CODEC,
	FMOD_PLUGINTYPE_DSP,
	FMOD_PLUGINTYPE_MAX
} FMOD_PLUGINTYPE;

typedef enum FMOD_CHANNELCONTROL_CALLBACK_TYPE {
	FMOD_CHANNELCONTROL_CALLBACK_END,
	FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE,
	FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT,
	FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION,
	FMOD_CHANNELCONTROL_CALLBACK_MAX
} FMOD_CHANNELCONTROL_CALLBACK_TYPE;

typedef enum FMOD_DSP_PARAMETER_TYPE {
	FMOD_DSP_PARAMETER_TYPE_FLOAT,
	FMOD_DSP_PARAMETER_TYPE_INT,
	FMOD_DSP_PARAMETER_TYPE_BOOL,
	FMOD_DSP_PARAMETER_TYPE_DATA,
	FMOD_DSP_PARAMETER_TYPE_MAX
} FMOD_DSP_PARAMETER_TYPE;

typedef enum FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE {
	FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR,
	FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO,
	FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR
} FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE;

typedef enum FMOD_DSPCONNECTION_TYPE {
	FMOD_DSPCONNECTION_TYPE_STANDARD,
	FMOD_DSPCONNECTION_TYPE_SIDECHAIN,
	FMOD_DSPCONNECTION_TYPE_SEND,
	FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN,
	FMOD_DSPCONNECTION_TYPE_MAX
} FMOD_DSPCONNECTION_TYPE;

typedef enum FMOD_OUTPUTTYPE {
	FMOD_OUTPUTTYPE_AUTODETECT,
	FMOD_OUTPUTTYPE_UNKNOWN,
	FMOD_OUTPUTTYPE_NOSOUND,
	FMOD_OUTPUTTYPE_WAVWRITER,
	FMOD_OUTPUTTYPE_NOSOUND_NRT,
	FMOD_OUTPUTTYPE_WAVWRITER_NRT,
	FMOD_OUTPUTTYPE_WASAPI,
	FMOD_OUTPUTTYPE_ASIO,
	FMOD_OUTPUTTYPE_PULSEAUDIO,
	FMOD_OUTPUTTYPE_ALSA,
	FMOD_OUTPUTTYPE_COREAUDIO,
	FMOD_OUTPUTTYPE_AUDIOTRACK,
	FMOD_OUTPUTTYPE_OPENSL,
	FMOD_OUTPUTTYPE_AUDIOOUT,
	FMOD_OUTPUTTYPE_AUDIO3D,
	FMOD_OUTPUTTYPE_WEBAUDIO,
	FMOD_OUTPUTTYPE_NNAUDIO,
	FMOD_OUTPUTTYPE_WINSONIC,
	FMOD_OUTPUTTYPE_AAUDIO,
	FMOD_OUTPUTTYPE_MAX
} FMOD_OUTPUTTYPE;

typedef enum FMOD_SOUNDGROUP_BEHAVIOR {
	FMOD_SOUNDGROUP_BEHAVIOR_FAIL,
	FMOD_SOUNDGROUP_BEHAVIOR_MUTE,
	FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST,
	FMOD_SOUNDGROUP_BEHAVIOR_MAX
} FMOD_SOUNDGROUP_BEHAVIOR;

typedef enum FMOD_SPEAKER {
	FMOD_SPEAKER_NONE = -1,
	FMOD_SPEAKER_FRONT_LEFT,
	FMOD_SPEAKER_FRONT_RIGHT,
	FMOD_SPEAKER_FRONT_CENTER,
	FMOD_SPEAKER_LOW_FREQUENCY,
	FMOD_SPEAKER_SURROUND_LEFT,
	FMOD_SPEAKER_SURROUND_RIGHT,
	FMOD_SPEAKER_BACK_LEFT,
	FMOD_SPEAKER_BACK_RIGHT,
	FMOD_SPEAKER_TOP_FRONT_LEFT,
	FMOD_SPEAKER_TOP_FRONT_RIGHT,
	FMOD_SPEAKER_TOP_BACK_LEFT,
	FMOD_SPEAKER_TOP_BACK_RIGHT,
	FMOD_SPEAKER_MAX
} FMOD_SPEAKER;

typedef enum FMOD_SPEAKERMODE {
	FMOD_SPEAKERMODE_DEFAULT,
	FMOD_SPEAKERMODE_RAW,
	FMOD_SPEAKERMODE_MONO,
	FMOD_SPEAKERMODE_STEREO,
	FMOD_SPEAKERMODE_QUAD,
	FMOD_SPEAKERMODE_SURROUND,
	FMOD_SPEAKERMODE_5POINT1,
	FMOD_SPEAKERMODE_7POINT1,
	FMOD_SPEAKERMODE_7POINT1POINT4,
	FMOD_SPEAKERMODE_MAX
} FMOD_SPEAKERMODE;

typedef enum FMOD_STUDIO_INSTANCETYPE {
	FMOD_STUDIO_INSTANCETYPE_NONE,
	FMOD_STUDIO_INSTANCETYPE_SYSTEM,
	FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION,
	FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE,
	FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE,
	FMOD_STUDIO_INSTANCETYPE_BUS,
	FMOD_STUDIO_INSTANCETYPE_VCA,
	FMOD_STUDIO_INSTANCETYPE_BANK,
	FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY
} FMOD_STUDIO_INSTANCETYPE;

typedef enum FMOD_STUDIO_EVENT_PROPERTY {
	FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY,
	FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY,
	FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD,
	FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE,
	FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE,
	FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN,
	FMOD_STUDIO_EVENT_PROPERTY_MAX
} FMOD_STUDIO_EVENT_PROPERTY;

typedef enum FMOD_STUDIO_LOAD_MEMORY_MODE {
	FMOD_STUDIO_LOAD_MEMORY,
	FMOD_STUDIO_LOAD_MEMORY_POINT
} FMOD_STUDIO_LOAD_MEMORY_MODE;

typedef enum FMOD_STUDIO_STOP_MODE {
	FMOD_STUDIO_STOP_ALLOWFADEOUT,
	FMOD_STUDIO_STOP_IMMEDIATE
} FMOD_STUDIO_STOP_MODE;

typedef enum FMOD_STUDIO_USER_PROPERTY_TYPE {
	FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER,
	FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN,
	FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT,
	FMOD_STUDIO_USER_PROPERTY_TYPE_STRING
} FMOD_STUDIO_USER_PROPERTY_TYPE;

// can't be an enum; they are signed, and 0x80000000 is out of range (assuming 32-bit)
// plus, bitops on signeds are just generally a bad idea
typedef unsigned FMOD_MODE;
#define FMOD_DEFAULT                    0x00000000
#define FMOD_LOOP_OFF                   0x00000001
#define FMOD_LOOP_NORMAL                0x00000002
#define FMOD_LOOP_BIDI                  0x00000004
#define FMOD_2D                         0x00000008
#define FMOD_3D                         0x00000010
#define FMOD_CREATESTREAM               0x00000080
#define FMOD_CREATESAMPLE               0x00000100
#define FMOD_CREATECOMPRESSEDSAMPLE     0x00000200
#define FMOD_OPENUSER                   0x00000400
#define FMOD_OPENMEMORY                 0x00000800
#define FMOD_OPENMEMORY_POINT           0x10000000
#define FMOD_OPENRAW                    0x00001000
#define FMOD_OPENONLY                   0x00002000
#define FMOD_ACCURATETIME               0x00004000
#define FMOD_MPEGSEARCH                 0x00008000
#define FMOD_NONBLOCKING                0x00010000
#define FMOD_UNIQUE                     0x00020000
#define FMOD_3D_HEADRELATIVE            0x00040000
#define FMOD_3D_WORLDRELATIVE           0x00080000
#define FMOD_3D_INVERSEROLLOFF          0x00100000
#define FMOD_3D_LINEARROLLOFF           0x00200000
#define FMOD_3D_LINEARSQUAREROLLOFF     0x00400000
#define FMOD_3D_INVERSETAPEREDROLLOFF   0x00800000
#define FMOD_3D_CUSTOMROLLOFF           0x04000000
#define FMOD_3D_IGNOREGEOMETRY          0x40000000
#define FMOD_IGNORETAGS                 0x02000000
#define FMOD_LOWMEM                     0x08000000
#define FMOD_VIRTUAL_PLAYFROMSTART      0x80000000

typedef unsigned FMOD_STUDIO_COMMANDCAPTURE_FLAGS;
#define FMOD_STUDIO_COMMANDCAPTURE_NORMAL             0x00000000
#define FMOD_STUDIO_COMMANDCAPTURE_FILEFLUSH          0x00000001
#define FMOD_STUDIO_COMMANDCAPTURE_SKIP_INITIAL_STATE 0x00000002

typedef unsigned FMOD_MEMORY_TYPE;
#define FMOD_MEMORY_NORMAL             0x00000000
#define FMOD_MEMORY_STREAM_FILE        0x00000001
#define FMOD_MEMORY_STREAM_DECODE      0x00000002
#define FMOD_MEMORY_SAMPLEDATA         0x00000004
#define FMOD_MEMORY_DSP_BUFFER         0x00000008
#define FMOD_MEMORY_PLUGIN             0x00000010
#define FMOD_MEMORY_PERSISTENT         0x00200000
#define FMOD_MEMORY_ALL                0xFFFFFFFF

typedef unsigned FMOD_INITFLAGS;
#define FMOD_INIT_NORMAL                     0x00000000
#define FMOD_INIT_STREAM_FROM_UPDATE         0x00000001
#define FMOD_INIT_MIX_FROM_UPDATE            0x00000002
#define FMOD_INIT_3D_RIGHTHANDED             0x00000004
#define FMOD_INIT_CHANNEL_LOWPASS            0x00000100
#define FMOD_INIT_CHANNEL_DISTANCEFILTER     0x00000200
#define FMOD_INIT_PROFILE_ENABLE             0x00010000
#define FMOD_INIT_VOL0_BECOMES_VIRTUAL       0x00020000
#define FMOD_INIT_GEOMETRY_USECLOSEST        0x00040000
#define FMOD_INIT_PREFER_DOLBY_DOWNMIX       0x00080000
#define FMOD_INIT_THREAD_UNSAFE              0x00100000
#define FMOD_INIT_PROFILE_METER_ALL          0x00200000
#define FMOD_INIT_MEMORY_TRACKING            0x00400000

typedef unsigned FMOD_STUDIO_INITFLAGS;
#define FMOD_STUDIO_INIT_NORMAL                0x00000000
#define FMOD_STUDIO_INIT_LIVEUPDATE            0x00000001
#define FMOD_STUDIO_INIT_ALLOW_MISSING_PLUGINS 0x00000002
#define FMOD_STUDIO_INIT_SYNCHRONOUS_UPDATE    0x00000004
#define FMOD_STUDIO_INIT_DEFERRED_CALLBACKS    0x00000008
#define FMOD_STUDIO_INIT_LOAD_FROM_UPDATE      0x00000010
#define FMOD_STUDIO_INIT_MEMORY_TRACKING       0x00000020

typedef unsigned FMOD_STUDIO_EVENT_CALLBACK_TYPE;
#define FMOD_STUDIO_EVENT_CALLBACK_CREATED                  0x00000001
#define FMOD_STUDIO_EVENT_CALLBACK_DESTROYED                0x00000002
#define FMOD_STUDIO_EVENT_CALLBACK_STARTING                 0x00000004
#define FMOD_STUDIO_EVENT_CALLBACK_STARTED                  0x00000008
#define FMOD_STUDIO_EVENT_CALLBACK_RESTARTED                0x00000010
#define FMOD_STUDIO_EVENT_CALLBACK_STOPPED                  0x00000020
#define FMOD_STUDIO_EVENT_CALLBACK_START_FAILED             0x00000040
#define FMOD_STUDIO_EVENT_CALLBACK_CREATE_PROGRAMMER_SOUND  0x00000080
#define FMOD_STUDIO_EVENT_CALLBACK_DESTROY_PROGRAMMER_SOUND 0x00000100
#define FMOD_STUDIO_EVENT_CALLBACK_PLUGIN_CREATED           0x00000200
#define FMOD_STUDIO_EVENT_CALLBACK_PLUGIN_DESTROYED         0x00000400
#define FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_MARKER          0x00000800
#define FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_BEAT            0x00001000
#define FMOD_STUDIO_EVENT_CALLBACK_SOUND_PLAYED             0x00002000
#define FMOD_STUDIO_EVENT_CALLBACK_SOUND_STOPPED            0x00004000
#define FMOD_STUDIO_EVENT_CALLBACK_REAL_TO_VIRTUAL          0x00008000
#define FMOD_STUDIO_EVENT_CALLBACK_VIRTUAL_TO_REAL          0x00010000
#define FMOD_STUDIO_EVENT_CALLBACK_START_EVENT_COMMAND      0x00020000
#define FMOD_STUDIO_EVENT_CALLBACK_ALL                      0xFFFFFFFF

typedef unsigned FMOD_TIMEUNIT;
#define FMOD_TIMEUNIT_MS            0x00000001
#define FMOD_TIMEUNIT_PCM           0x00000002
#define FMOD_TIMEUNIT_PCMBYTES      0x00000004
#define FMOD_TIMEUNIT_RAWBYTES      0x00000008
#define FMOD_TIMEUNIT_PCMFRACTION   0x00000010
#define FMOD_TIMEUNIT_MODORDER      0x00000100
#define FMOD_TIMEUNIT_MODROW        0x00000200
#define FMOD_TIMEUNIT_MODPATTERN    0x00000400

typedef unsigned FMOD_STUDIO_LOAD_BANK_FLAGS;
#define FMOD_STUDIO_LOAD_BANK_NORMAL             0x00000000
#define FMOD_STUDIO_LOAD_BANK_NONBLOCKING        0x00000001
#define FMOD_STUDIO_LOAD_BANK_DECOMPRESS_SAMPLES 0x00000002
#define FMOD_STUDIO_LOAD_BANK_UNENCRYPTED        0x00000004

typedef unsigned FMOD_DEBUG_FLAGS;
#define FMOD_DEBUG_LEVEL_NONE            0x00000000
#define FMOD_DEBUG_LEVEL_ERROR           0x00000001
#define FMOD_DEBUG_LEVEL_WARNING         0x00000002
#define FMOD_DEBUG_LEVEL_LOG             0x00000004
#define FMOD_DEBUG_TYPE_MEMORY           0x00000100
#define FMOD_DEBUG_TYPE_FILE             0x00000200
#define FMOD_DEBUG_TYPE_CODEC            0x00000400
#define FMOD_DEBUG_TYPE_TRACE            0x00000800
#define FMOD_DEBUG_DISPLAY_TIMESTAMPS    0x00010000
#define FMOD_DEBUG_DISPLAY_LINENUMBERS   0x00020000
#define FMOD_DEBUG_DISPLAY_THREAD        0x00040000

typedef unsigned FMOD_CHANNELMASK;
#define FMOD_CHANNELMASK_FRONT_LEFT       0x00000001
#define FMOD_CHANNELMASK_FRONT_RIGHT      0x00000002
#define FMOD_CHANNELMASK_FRONT_CENTER     0x00000004
#define FMOD_CHANNELMASK_LOW_FREQUENCY    0x00000008
#define FMOD_CHANNELMASK_SURROUND_LEFT    0x00000010
#define FMOD_CHANNELMASK_SURROUND_RIGHT   0x00000020
#define FMOD_CHANNELMASK_BACK_LEFT        0x00000040
#define FMOD_CHANNELMASK_BACK_RIGHT       0x00000080
#define FMOD_CHANNELMASK_BACK_CENTER      0x00000100
#define FMOD_CHANNELMASK_MONO             (FMOD_CHANNELMASK_FRONT_LEFT)
#define FMOD_CHANNELMASK_STEREO           (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT)
#define FMOD_CHANNELMASK_LRC              (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER)
#define FMOD_CHANNELMASK_QUAD             (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT)
#define FMOD_CHANNELMASK_SURROUND         (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER | FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT)
#define FMOD_CHANNELMASK_5POINT1          (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER | FMOD_CHANNELMASK_LOW_FREQUENCY | FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT)
#define FMOD_CHANNELMASK_5POINT1_REARS    (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER | FMOD_CHANNELMASK_LOW_FREQUENCY | FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT)
#define FMOD_CHANNELMASK_7POINT0          (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER | FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT | FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT)
#define FMOD_CHANNELMASK_7POINT1          (FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER | FMOD_CHANNELMASK_LOW_FREQUENCY | FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT | FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT)

typedef unsigned FMOD_DRIVER_STATE;
#define FMOD_DRIVER_STATE_CONNECTED   0x00000001
#define FMOD_DRIVER_STATE_DEFAULT     0x00000002

typedef unsigned FMOD_PORT_INDEX;
#define FMOD_PORT_INDEX_NONE 0xFFFFFFFFFFFFFFFF

typedef unsigned FMOD_STUDIO_COMMANDREPLAY_FLAGS;
#define FMOD_STUDIO_COMMANDREPLAY_NORMAL         0x00000000
#define FMOD_STUDIO_COMMANDREPLAY_SKIP_CLEANUP   0x00000001
#define FMOD_STUDIO_COMMANDREPLAY_FAST_FORWARD   0x00000002
#define FMOD_STUDIO_COMMANDREPLAY_SKIP_BANK_LOAD 0x00000004

typedef unsigned FMOD_STUDIO_SYSTEM_CALLBACK_TYPE;
#define FMOD_STUDIO_SYSTEM_CALLBACK_PREUPDATE   0x00000001
#define FMOD_STUDIO_SYSTEM_CALLBACK_POSTUPDATE  0x00000002
#define FMOD_STUDIO_SYSTEM_CALLBACK_BANK_UNLOAD 0x00000004
#define FMOD_STUDIO_SYSTEM_CALLBACK_ALL         0xFFFFFFFF

typedef unsigned FMOD_SYSTEM_CALLBACK_TYPE;
#define FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED        0x00000001
#define FMOD_SYSTEM_CALLBACK_DEVICELOST               0x00000002
#define FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED   0x00000004
#define FMOD_SYSTEM_CALLBACK_THREADCREATED            0x00000008
#define FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION         0x00000010
#define FMOD_SYSTEM_CALLBACK_PREMIX                   0x00000020
#define FMOD_SYSTEM_CALLBACK_POSTMIX                  0x00000040
#define FMOD_SYSTEM_CALLBACK_ERROR                    0x00000080
#define FMOD_SYSTEM_CALLBACK_MIDMIX                   0x00000100
#define FMOD_SYSTEM_CALLBACK_THREADDESTROYED          0x00000200
#define FMOD_SYSTEM_CALLBACK_PREUPDATE                0x00000400
#define FMOD_SYSTEM_CALLBACK_POSTUPDATE               0x00000800
#define FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED        0x00001000
#define FMOD_SYSTEM_CALLBACK_ALL                      0xFFFFFFFF

typedef unsigned FMOD_PORT_TYPE; // undocumented

typedef int FMOD_BOOL;

typedef struct FMOD_SYSTEM FMOD_SYSTEM;
typedef struct FMOD_SOUND FMOD_SOUND;
typedef struct FMOD_STUDIO_SYSTEM FMOD_STUDIO_SYSTEM;
typedef struct FMOD_STUDIO_VCA FMOD_STUDIO_VCA;
typedef struct FMOD_STUDIO_BUS FMOD_STUDIO_BUS;
typedef struct FMOD_STUDIO_BANK FMOD_STUDIO_BANK;
typedef struct FMOD_CHANNELGROUP FMOD_CHANNELGROUP;
typedef struct FMOD_REVERB3D FMOD_REVERB3D;
typedef struct FMOD_STUDIO_EVENTDESCRIPTION FMOD_STUDIO_EVENTDESCRIPTION;
typedef struct FMOD_DSP FMOD_DSP;
typedef struct FMOD_DSP_DESCRIPTION FMOD_DSP_DESCRIPTION;
typedef struct FMOD_CHANNEL FMOD_CHANNEL;
typedef struct FMOD_STUDIO_EVENTINSTANCE FMOD_STUDIO_EVENTINSTANCE;
typedef struct FMOD_STUDIO_COMMANDREPLAY FMOD_STUDIO_COMMANDREPLAY;
typedef struct FMOD_VECTOR FMOD_VECTOR;
typedef struct FMOD_GEOMETRY FMOD_GEOMETRY;
typedef struct FMOD_SOUNDGROUP FMOD_SOUNDGROUP;
typedef struct FMOD_OPENSTATE FMOD_OPENSTATE;
typedef struct FMOD_STUDIO_PLAYBACK_STATE FMOD_STUDIO_PLAYBACK_STATE;
typedef struct FMOD_STUDIO_LOADING_STATE FMOD_STUDIO_LOADING_STATE;
typedef struct FMOD_CHANNELCONTROL FMOD_CHANNELCONTROL;
typedef struct FMOD_DSPCONNECTION FMOD_DSPCONNECTION;
typedef struct FMOD_SYNCPOINT FMOD_SYNCPOINT;

typedef struct FMOD_GUID {
	unsigned int Data1;
	unsigned short Data2;
	unsigned short Data3;
	unsigned char Data4[8];
} FMOD_GUID;

typedef struct FMOD_REVERB_PROPERTIES {
	float DecayTime;
	float EarlyDelay;
	float LateDelay;
	float HFReference;
	float HFDecayRatio;
	float Diffusion;
	float Density;
	float LowShelfFrequency;
	float LowShelfGain;
	float HighCut;
	float EarlyLateMix;
	float WetLevel;
} FMOD_REVERB_PROPERTIES;

typedef struct FMOD_TAG {
	FMOD_TAGTYPE type;
	FMOD_TAGDATATYPE datatype;
	char *name;
	void *data;
	unsigned int datalen;
	FMOD_BOOL updated;
} FMOD_TAG;

typedef struct FMOD_DSP_METERING_INFO {
	int numsamples;
	float peaklevel[32];
	float rmslevel[32];
	short numchannels;
} FMOD_DSP_METERING_INFO;

typedef struct FMOD_STUDIO_BUFFER_INFO {
	int currentusage;
	int peakusage;
	int capacity;
	int stallcount;
	float stalltime;
} FMOD_STUDIO_BUFFER_INFO;

typedef struct FMOD_STUDIO_BUFFER_USAGE {
	FMOD_STUDIO_BUFFER_INFO studiocommandqueue;
	FMOD_STUDIO_BUFFER_INFO studiohandle;
} FMOD_STUDIO_BUFFER_USAGE;

typedef struct FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
	int numpoints;
	float *pointparamvalues;
	float *pointpositions;
} FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR;

typedef struct FMOD_DSP_PARAMETER_FLOAT_MAPPING {
	FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE type;
	FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR piecewiselinearmapping;
} FMOD_DSP_PARAMETER_FLOAT_MAPPING;

typedef struct FMOD_DSP_PARAMETER_DESC_FLOAT {
	float min;
	float max;
	float defaultval;
	FMOD_DSP_PARAMETER_FLOAT_MAPPING mapping;
} FMOD_DSP_PARAMETER_DESC_FLOAT;

typedef struct FMOD_DSP_PARAMETER_DESC_INT {
	int min;
	int max;
	int defaultval;
	FMOD_BOOL goestoinf;
	const char *const *valuenames;
} FMOD_DSP_PARAMETER_DESC_INT;

typedef struct FMOD_DSP_PARAMETER_DESC_BOOL {
	FMOD_BOOL defaultval;
	const char *const *valuenames;
} FMOD_DSP_PARAMETER_DESC_BOOL;

typedef struct FMOD_DSP_PARAMETER_DESC_DATA {
	int datatype;
} FMOD_DSP_PARAMETER_DESC_DATA;

typedef struct FMOD_DSP_PARAMETER_DESC {
	FMOD_DSP_PARAMETER_TYPE type;
	char name[16];
	char label[16];
	const char *description;
	union {
		FMOD_DSP_PARAMETER_DESC_FLOAT floatdesc;
		FMOD_DSP_PARAMETER_DESC_INT intdesc;
		FMOD_DSP_PARAMETER_DESC_BOOL booldesc;
		FMOD_DSP_PARAMETER_DESC_DATA datadesc;
	};
} FMOD_DSP_PARAMETER_DESC;

typedef struct FMOD_VECTOR {
	float x;
	float y;
	float z;
} FMOD_VECTOR;

typedef struct FMOD_3D_ATTRIBUTES {
	FMOD_VECTOR position;
	FMOD_VECTOR velocity;
	FMOD_VECTOR forward;
	FMOD_VECTOR up;
} FMOD_3D_ATTRIBUTES;

typedef struct FMOD_ADVANCEDSETTINGS {
	int cbSize;
	int maxMPEGCodecs;
	int maxADPCMCodecs;
	int maxXMACodecs;
	int maxVorbisCodecs;
	int maxAT9Codecs;
	int maxFADPCMCodecs;
	int maxPCMCodecs;
	int ASIONumChannels;
	char **ASIOChannelList;
	FMOD_SPEAKER *ASIOSpeakerList;
	float vol0virtualvol;
	unsigned int defaultDecodeBufferSize;
	unsigned short profilePort;
	unsigned int geometryMaxFadeTime;
	float distanceFilterCenterFreq;
	int reverb3Dinstance;
	int DSPBufferPoolSize;
	FMOD_DSP_RESAMPLER resamplerMethod;
	unsigned int randomSeed;
	int maxConvolutionThreads;
} FMOD_ADVANCEDSETTINGS;

typedef struct FMOD_STUDIO_ADVANCEDSETTINGS {
	int cbsize;
	unsigned int commandqueuesize;
	unsigned int handleinitialsize;
	int studioupdateperiod;
	int idlesampledatapoolsize;
	unsigned int streamingscheduledelay;
	const char *encryptionkey;
} FMOD_STUDIO_ADVANCEDSETTINGS;

typedef struct FMOD_ASYNCREADINFO FMOD_ASYNCREADINFO;

typedef FMOD_RESULT (*FMOD_FILE_ASYNCDONE_FUNC)(FMOD_ASYNCREADINFO *info, FMOD_RESULT result);

typedef FMOD_RESULT (*FMOD_OUTPUT_LOG_FUNC)(FMOD_DEBUG_FLAGS level, const char *file, int line, const char *function, const char *string, ...);

struct FMOD_ASYNCREADINFO {
	void *handle;
	unsigned int offset;
	unsigned int sizebytes;
	int priority;
	void *userdata;
	void *buffer;
	unsigned int bytesread;
	FMOD_FILE_ASYNCDONE_FUNC done;
};

typedef struct FMOD_STUDIO_USER_PROPERTY {
	const char *name;
	FMOD_STUDIO_USER_PROPERTY_TYPE type;
	union {
		int intvalue;
		FMOD_BOOL boolvalue;
		float floatvalue;
		const char *stringvalue;
	};
} FMOD_STUDIO_USER_PROPERTY;

typedef void* (*FMOD_MEMORY_ALLOC_CALLBACK)(unsigned int size, FMOD_MEMORY_TYPE type, const char *sourcestr);
typedef void* (*FMOD_MEMORY_REALLOC_CALLBACK)(void *ptr, unsigned int size, FMOD_MEMORY_TYPE type, const char *sourcestr);
typedef void (*FMOD_MEMORY_FREE_CALLBACK)(void *ptr, FMOD_MEMORY_TYPE type, const char *sourcestr);

typedef float (*FMOD_3D_ROLLOFF_CALLBACK)(FMOD_CHANNELCONTROL *channelcontrol, float distance);

typedef FMOD_RESULT (*FMOD_CHANNELCONTROL_CALLBACK)(FMOD_CHANNELCONTROL *channelcontrol, FMOD_CHANNELCONTROL_TYPE controltype, FMOD_CHANNELCONTROL_CALLBACK_TYPE callbacktype, void *commanddata1, void *commanddata2);

typedef FMOD_RESULT (*FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK)(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, float currenttime, void *userdata);

typedef FMOD_RESULT (*FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK)(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance, void *userdata);

typedef FMOD_RESULT (*FMOD_STUDIO_EVENT_CALLBACK)(FMOD_STUDIO_EVENT_CALLBACK_TYPE type, FMOD_STUDIO_EVENTINSTANCE *event, void *parameters);

typedef FMOD_RESULT (*FMOD_SOUND_PCMREAD_CALLBACK)(FMOD_SOUND *sound, void *data, unsigned int datalen);

typedef FMOD_RESULT (*FMOD_SOUND_PCMSETPOS_CALLBACK)(FMOD_SOUND *sound, int subsound, unsigned int position, FMOD_TIMEUNIT postype);

typedef FMOD_RESULT (*FMOD_SOUND_NONBLOCK_CALLBACK)(FMOD_SOUND *sound, FMOD_RESULT result);

typedef FMOD_RESULT (*FMOD_FILE_CLOSE_CALLBACK)(void *handle, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_OPEN_CALLBACK)(const char *name, unsigned int *filesize, void **handle, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_CLOSE_CALLBACK)(void *handle, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_READ_CALLBACK)(void *handle, void *buffer, unsigned int sizebytes, unsigned int *bytesread, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_SEEK_CALLBACK)(void *handle, unsigned int pos, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_ASYNCREAD_CALLBACK)(FMOD_ASYNCREADINFO *info, void *userdata);

typedef FMOD_RESULT (*FMOD_FILE_ASYNCCANCEL_CALLBACK)(FMOD_ASYNCREADINFO *info, void *userdata);

typedef FMOD_RESULT (*FMOD_DEBUG_CALLBACK)(FMOD_DEBUG_FLAGS flags, const char *file, int line, const char *func, const char *message);

typedef FMOD_RESULT (*FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK)(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, const FMOD_GUID *bankguid, const char *bankfilename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank, void *userdata);

typedef FMOD_RESULT (*FMOD_STUDIO_SYSTEM_CALLBACK)(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE type, void *commanddata, void *userdata);

typedef FMOD_RESULT (*FMOD_SYSTEM_CALLBACK)(FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK_TYPE type, void *commanddata1, void *commanddata2, void *userdata);

typedef struct FMOD_CREATESOUNDEXINFO {
	int cbsize;
	unsigned int length;
	unsigned int fileoffset;
	int numchannels;
	int defaultfrequency;
	FMOD_SOUND_FORMAT format;
	unsigned int decodebuffersize;
	int initialsubsound;
	int numsubsounds;
	int *inclusionlist;
	int inclusionlistnum;
	FMOD_SOUND_PCMREAD_CALLBACK pcmreadcallback;
	FMOD_SOUND_PCMSETPOS_CALLBACK pcmsetposcallback;
	FMOD_SOUND_NONBLOCK_CALLBACK nonblockcallback;
	const char *dlsname;
	const char *encryptionkey;
	int maxpolyphony;
	void *userdata;
	FMOD_SOUND_TYPE suggestedsoundtype;
	FMOD_FILE_OPEN_CALLBACK fileuseropen;
	FMOD_FILE_CLOSE_CALLBACK fileuserclose;
	FMOD_FILE_READ_CALLBACK fileuserread;
	FMOD_FILE_SEEK_CALLBACK fileuserseek;
	FMOD_FILE_ASYNCREAD_CALLBACK fileuserasyncread;
	FMOD_FILE_ASYNCCANCEL_CALLBACK fileuserasynccancel;
	void *fileuserdata;
	int filebuffersize;
	FMOD_CHANNELORDER channelorder;
	FMOD_SOUNDGROUP *initialsoundgroup;
	unsigned int initialseekposition;
	FMOD_TIMEUNIT initialseekpostype;
	int ignoresetfilesystem;
	unsigned int audioqueuepolicy;
	unsigned int minmidigranularity;
	int nonblockthreadid;
	FMOD_GUID *fsbguid;
} FMOD_CREATESOUNDEXINFO;

typedef struct FMOD_STUDIO_BANK_INFO {
	int size;
	void *userdata;
	int userdatalength;
	FMOD_FILE_OPEN_CALLBACK opencallback;
	FMOD_FILE_CLOSE_CALLBACK closecallback;
	FMOD_FILE_READ_CALLBACK readcallback;
	FMOD_FILE_SEEK_CALLBACK seekcallback;
} FMOD_STUDIO_BANK_INFO;

typedef struct FMOD_STUDIO_COMMAND_INFO {
	const char *commandname;
	int parentcommandindex;
	int framenumber;
	float frametime;
	FMOD_STUDIO_INSTANCETYPE instancetype;
	FMOD_STUDIO_INSTANCETYPE outputtype;
	unsigned int instancehandle;
	unsigned int outputhandle;
} FMOD_STUDIO_COMMAND_INFO;

typedef struct FMOD_STUDIO_CPU_USAGE {
	float dspusage;
	float streamusage;
	float geometryusage;
	float updateusage;
	float studiousage;
} FMOD_STUDIO_CPU_USAGE;

typedef struct FMOD_STUDIO_SOUND_INFO {
	const char *name_or_data;
	FMOD_MODE mode;
	FMOD_CREATESOUNDEXINFO exinfo;
	int subsoundindex;
} FMOD_STUDIO_SOUND_INFO;

FMOD_RESULT FMOD_Studio_System_GetVCA(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_STUDIO_VCA **vca);
FMOD_RESULT FMOD_System_CreateReverb3D(FMOD_SYSTEM *system, FMOD_REVERB3D **reverb);
FMOD_RESULT FMOD_Studio_EventDescription_Is3D(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *is3d);
FMOD_RESULT FMOD_Studio_ParseID(const char *idstring, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_System_LookupID(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_VCA_GetID(FMOD_STUDIO_VCA *vca, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_Bank_GetID(FMOD_STUDIO_BANK *bank, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_EventDescription_GetID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_Bus_GetID(FMOD_STUDIO_BUS *bus, FMOD_GUID *id);
FMOD_RESULT FMOD_Studio_System_GetVCAByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_VCA **vca);
FMOD_RESULT FMOD_Studio_System_GetBankByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BANK **bank);
FMOD_RESULT FMOD_Studio_System_GetBusByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BUS **bus);
FMOD_RESULT FMOD_Studio_System_GetEventByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_EVENTDESCRIPTION **event);
FMOD_RESULT FMOD_ChannelGroup_AddDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP *dsp);
FMOD_RESULT FMOD_System_CreateDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, FMOD_DSP **dsp);
FMOD_RESULT FMOD_ChannelGroup_RemoveDSP(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp);
FMOD_RESULT FMOD_System_LockDSP(FMOD_SYSTEM *system);
FMOD_RESULT FMOD_System_UnlockDSP(FMOD_SYSTEM *system);
FMOD_RESULT FMOD_System_RegisterDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, unsigned int *handle);
FMOD_RESULT FMOD_ChannelGroup_GetDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP **dsp);
FMOD_RESULT FMOD_System_PlayDSP(FMOD_SYSTEM *system, FMOD_DSP *dsp, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel);
FMOD_RESULT FMOD_Sound_ReadData(FMOD_SOUND *sound, void *buffer, unsigned int length, unsigned int *read);
FMOD_RESULT FMOD_Studio_Bank_LoadSampleData(FMOD_STUDIO_BANK *bank);
FMOD_RESULT FMOD_Studio_EventDescription_LoadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription);
FMOD_RESULT FMOD_Studio_Bank_UnloadSampleData(FMOD_STUDIO_BANK *bank);
FMOD_RESULT FMOD_Studio_EventDescription_UnloadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription);
FMOD_RESULT FMOD_Sound_SeekData(FMOD_SOUND *sound, unsigned int pcm);
FMOD_RESULT FMOD_Reverb3D_GetUserData(FMOD_REVERB3D *reverb3d, void **userdata);
FMOD_RESULT FMOD_DSP_GetUserData(FMOD_DSP *dsp, void **userdata);
FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata);
FMOD_RESULT FMOD_Studio_EventInstance_GetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void **userdata);
FMOD_RESULT FMOD_Studio_Bank_GetUserData(FMOD_STUDIO_BANK *bank, void **userdata);
FMOD_RESULT FMOD_Channel_GetUserData (FMOD_CHANNEL *channel, void **userdata);
FMOD_RESULT FMOD_System_GetUserData (FMOD_SYSTEM *system, void **userdata);
FMOD_RESULT FMOD_Studio_System_GetUserData(FMOD_STUDIO_SYSTEM *system, void **userdata);
FMOD_RESULT FMOD_DSPConnection_GetUserData (FMOD_DSPCONNECTION *dspconnection, void **userdata);
FMOD_RESULT FMOD_Studio_EventDescription_GetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void **userdata);
FMOD_RESULT FMOD_SoundGroup_GetUserData (FMOD_SOUNDGROUP *soundgroup, void **userdata);
FMOD_RESULT FMOD_ChannelGroup_GetUserData (FMOD_CHANNELGROUP *channelgroup, void **userdata);
FMOD_RESULT FMOD_Studio_CommandReplay_GetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void **userdata);
FMOD_RESULT FMOD_Geometry_GetUserData (FMOD_GEOMETRY *geometry, void **userdata);
FMOD_RESULT FMOD_Reverb3D_SetUserData (FMOD_REVERB3D *reverb3d, void *userdata);
FMOD_RESULT FMOD_DSP_SetUserData (FMOD_DSP *dsp, void *userdata);
FMOD_RESULT FMOD_Sound_SetUserData (FMOD_SOUND *sound, void *userdata);
FMOD_RESULT FMOD_Studio_EventInstance_SetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void *userdata);
FMOD_RESULT FMOD_Studio_Bank_SetUserData(FMOD_STUDIO_BANK *bank, void *userdata);
FMOD_RESULT FMOD_Channel_SetUserData (FMOD_CHANNEL *channel, void *userdata);
FMOD_RESULT FMOD_System_SetUserData (FMOD_SYSTEM *system, void *userdata);
FMOD_RESULT FMOD_Studio_System_SetUserData(FMOD_STUDIO_SYSTEM *system, void *userdata);
FMOD_RESULT FMOD_DSPConnection_SetUserData (FMOD_DSPCONNECTION *dspconnection, void *userdata);
FMOD_RESULT FMOD_Studio_EventDescription_SetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void *userdata); 
FMOD_RESULT FMOD_SoundGroup_SetUserData (FMOD_SOUNDGROUP *soundgroup, void *userdata);
FMOD_RESULT FMOD_ChannelGroup_SetUserData (FMOD_CHANNELGROUP *channelgroup, void *userdata);
FMOD_RESULT FMOD_Studio_CommandReplay_SetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void *userdata);
FMOD_RESULT FMOD_Geometry_SetUserData (FMOD_GEOMETRY *geometry, void *userdata);
FMOD_RESULT FMOD_DSP_GetParameterData (FMOD_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen);
FMOD_RESULT FMOD_DSP_SetParameterData (FMOD_DSP *dsp, int index, void *data, unsigned int length);
FMOD_RESULT FMOD_ChannelGroup_Get3DSpread (FMOD_CHANNELGROUP *channelgroup, float *angle);
FMOD_RESULT FMOD_ChannelGroup_Set3DSpread (FMOD_CHANNELGROUP *channelgroup, float angle);
FMOD_RESULT FMOD_Studio_Bank_Unload(FMOD_STUDIO_BANK *bank);
FMOD_RESULT FMOD_Sound_GetMusicSpeed (FMOD_SOUND *sound, float *speed);
FMOD_RESULT FMOD_Sound_SetMusicSpeed (FMOD_SOUND *sound, float speed);
FMOD_RESULT FMOD_SoundGroup_GetMuteFadeSpeed (FMOD_SOUNDGROUP *soundgroup, float *speed);
FMOD_RESULT FMOD_SoundGroup_SetMuteFadeSpeed (FMOD_SOUNDGROUP *soundgroup, float speed);
FMOD_RESULT FMOD_DSP_GetMeteringEnabled (FMOD_DSP *dsp, FMOD_BOOL *inputEnabled, FMOD_BOOL *outputEnabled);
FMOD_RESULT FMOD_DSP_SetMeteringEnabled (FMOD_DSP *dsp, FMOD_BOOL inputEnabled, FMOD_BOOL outputEnabled);
FMOD_RESULT FMOD_Studio_EventInstance_GetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *paused);
FMOD_RESULT FMOD_ChannelGroup_GetPaused (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *paused);
FMOD_RESULT FMOD_Studio_Bus_GetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL *paused);
FMOD_RESULT FMOD_Studio_CommandReplay_GetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL *paused);
FMOD_RESULT FMOD_Studio_EventInstance_SetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL paused);
FMOD_RESULT FMOD_ChannelGroup_SetPaused (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused);
FMOD_RESULT FMOD_Studio_Bus_SetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL paused);
FMOD_RESULT FMOD_Studio_CommandReplay_SetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL paused);
FMOD_BOOL FMOD_Studio_VCA_IsValid(FMOD_STUDIO_VCA *vca);
FMOD_BOOL FMOD_Studio_EventInstance_IsValid(FMOD_STUDIO_EVENTINSTANCE *eventinstance);
FMOD_BOOL FMOD_Studio_Bank_IsValid(FMOD_STUDIO_BANK *bank);
FMOD_BOOL FMOD_Studio_System_IsValid(FMOD_STUDIO_SYSTEM *system);
FMOD_BOOL FMOD_Studio_EventDescription_IsValid(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription);
FMOD_BOOL FMOD_Studio_Bus_IsValid(FMOD_STUDIO_BUS *bus);
FMOD_BOOL FMOD_Studio_CommandReplay_IsValid(FMOD_STUDIO_COMMANDREPLAY *replay);
FMOD_RESULT FMOD_Studio_CommandReplay_SeekToCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex);
FMOD_RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int *commandindex, float *currenttime);
FMOD_RESULT FMOD_System_MixerSuspend (FMOD_SYSTEM *system);
FMOD_RESULT FMOD_Sound_GetSubSound (FMOD_SOUND *sound, int index, FMOD_SOUND **subsound);
FMOD_RESULT FMOD_System_CreateSound (FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound);
FMOD_RESULT FMOD_SoundGroup_GetSound (FMOD_SOUNDGROUP *soundgroup, int index, FMOD_SOUND **sound);
FMOD_RESULT FMOD_Channel_GetCurrentSound (FMOD_CHANNEL *channel, FMOD_SOUND **sound);
FMOD_RESULT FMOD_System_PlaySound (FMOD_SYSTEM *system, FMOD_SOUND *sound, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel);
FMOD_RESULT FMOD_Studio_EventDescription_GetMinimumDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *distance);
FMOD_RESULT FMOD_Studio_EventDescription_GetMaximumDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *distance);
FMOD_RESULT FMOD_Sound_Get3DMinMaxDistance (FMOD_SOUND *sound, float *min, float *max);
FMOD_RESULT FMOD_ChannelGroup_Get3DMinMaxDistance (FMOD_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance);
FMOD_RESULT FMOD_Sound_Set3DMinMaxDistance (FMOD_SOUND *sound, float min, float max);
FMOD_RESULT FMOD_ChannelGroup_Set3DMinMaxDistance (FMOD_CHANNELGROUP *channelgroup, float mindistance, float maxdistance);
FMOD_RESULT FMOD_Studio_EventDescription_CreateInstance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance);
FMOD_RESULT FMOD_Sound_GetMode (FMOD_SOUND *sound, FMOD_MODE *mode);
FMOD_RESULT FMOD_Channel_GetMode (FMOD_CHANNEL *channel, FMOD_MODE *mode);
FMOD_RESULT FMOD_ChannelGroup_GetMode (FMOD_CHANNELGROUP *channelgroup, FMOD_MODE *mode);
FMOD_RESULT FMOD_Sound_SetMode (FMOD_SOUND *sound, FMOD_MODE mode);
FMOD_RESULT FMOD_Channel_SetMode (FMOD_CHANNEL *channel, FMOD_MODE mode);
FMOD_RESULT FMOD_ChannelGroup_SetMode (FMOD_CHANNELGROUP *channelgroup, FMOD_MODE mode);
FMOD_RESULT FMOD_DSP_GetCPUUsage (FMOD_DSP *dsp, unsigned int *exclusive, unsigned int *inclusive);
FMOD_RESULT FMOD_System_GetCPUUsage (FMOD_SYSTEM *system, float *dsp, float *stream, float *geometry, float *update, float *total);
FMOD_RESULT FMOD_Studio_System_GetCPUUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_CPU_USAGE *usage);
FMOD_RESULT FMOD_System_GetFileUsage (FMOD_SYSTEM *system, long long *sampleBytesRead, long long *streamBytesRead, long long *otherBytesRead);
FMOD_RESULT FMOD_Studio_System_GetBufferUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BUFFER_USAGE *usage);
FMOD_RESULT FMOD_Studio_System_ResetBufferUsage(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_Geometry_GetScale (FMOD_GEOMETRY *geometry, FMOD_VECTOR *scale);
FMOD_RESULT FMOD_Geometry_SetScale (FMOD_GEOMETRY *geometry, const FMOD_VECTOR *scale);
FMOD_RESULT FMOD_SoundGroup_GetMaxAudible (FMOD_SOUNDGROUP *soundgroup, int *maxaudible);
FMOD_RESULT FMOD_SoundGroup_SetMaxAudible (FMOD_SOUNDGROUP *soundgroup, int maxaudible);
FMOD_RESULT FMOD_DSP_GetIdle (FMOD_DSP *dsp, FMOD_BOOL *idle);
FMOD_RESULT FMOD_System_GetPluginHandle (FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int index, unsigned int *handle);
FMOD_RESULT FMOD_System_GetOutputHandle (FMOD_SYSTEM *system, void **handle);
FMOD_RESULT FMOD_Studio_System_LoadBankFile(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank);
FMOD_RESULT FMOD_Sound_GetName (FMOD_SOUND *sound, char *name, int namelen);
FMOD_RESULT FMOD_SoundGroup_GetName (FMOD_SOUNDGROUP *soundgroup, char *name, int namelen);
FMOD_RESULT FMOD_ChannelGroup_GetName (FMOD_CHANNELGROUP *channelgroup, char *name, int namelen);
FMOD_RESULT FMOD_Studio_CommandReplay_SeekToTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time);
FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time, int *commandindex);
FMOD_RESULT FMOD_Sound_GetMusicChannelVolume (FMOD_SOUND *sound, int channel, float *volume);
FMOD_RESULT FMOD_Sound_SetMusicChannelVolume (FMOD_SOUND *sound, int channel, float volume);
FMOD_RESULT FMOD_Studio_VCA_GetVolume(FMOD_STUDIO_VCA *vca, float *volume, float *finalvolume);
FMOD_RESULT FMOD_Studio_EventInstance_GetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *volume, float *finalvolume);
FMOD_RESULT FMOD_SoundGroup_GetVolume (FMOD_SOUNDGROUP *soundgroup, float *volume);
FMOD_RESULT FMOD_ChannelGroup_GetVolume (FMOD_CHANNELGROUP *channelgroup, float *volume);
FMOD_RESULT FMOD_Studio_Bus_GetVolume(FMOD_STUDIO_BUS *bus, float *volume, float *finalvolume);
FMOD_RESULT FMOD_Studio_VCA_SetVolume(FMOD_STUDIO_VCA *vca, float volume);
FMOD_RESULT FMOD_Studio_EventInstance_SetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float volume);
FMOD_RESULT FMOD_SoundGroup_SetVolume (FMOD_SOUNDGROUP *soundgroup, float volume);
FMOD_RESULT FMOD_ChannelGroup_SetVolume (FMOD_CHANNELGROUP *channelgroup, float volume);
FMOD_RESULT FMOD_Studio_Bus_SetVolume(FMOD_STUDIO_BUS *bus, float volume);
FMOD_RESULT FMOD_System_MixerResume (FMOD_SYSTEM *system);
FMOD_RESULT FMOD_DSP_GetType (FMOD_DSP *dsp, FMOD_DSP_TYPE *type);
FMOD_RESULT FMOD_DSPConnection_GetType (FMOD_DSPCONNECTION *dspconnection, FMOD_DSPCONNECTION_TYPE *type);
FMOD_RESULT FMOD_System_CreateDSPByType (FMOD_SYSTEM *system, FMOD_DSP_TYPE type, FMOD_DSP **dsp);
FMOD_RESULT FMOD_Studio_System_StopCommandCapture(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_Studio_System_StartCommandCapture(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDCAPTURE_FLAGS flags);
FMOD_RESULT FMOD_Reverb3D_Release (FMOD_REVERB3D *reverb3d);
FMOD_RESULT FMOD_DSP_Release (FMOD_DSP *dsp);
FMOD_RESULT FMOD_Sound_Release (FMOD_SOUND *sound);
FMOD_RESULT FMOD_Studio_EventInstance_Release(FMOD_STUDIO_EVENTINSTANCE *eventinstance);
FMOD_RESULT FMOD_System_Release (FMOD_SYSTEM *system); 
FMOD_RESULT FMOD_Studio_System_Release(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_SoundGroup_Release (FMOD_SOUNDGROUP *soundgroup);
FMOD_RESULT FMOD_ChannelGroup_Release (FMOD_CHANNELGROUP *channelgroup);
FMOD_RESULT FMOD_Studio_CommandReplay_Release(FMOD_STUDIO_COMMANDREPLAY *replay);
FMOD_RESULT FMOD_Geometry_Release (FMOD_GEOMETRY *geometry);
FMOD_RESULT FMOD_System_Close (FMOD_SYSTEM *system);
FMOD_RESULT FMOD_System_Update (FMOD_SYSTEM *system);
FMOD_RESULT FMOD_Studio_System_Update(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_System_Create (FMOD_SYSTEM **system); 
FMOD_RESULT FMOD_Studio_System_Create(FMOD_STUDIO_SYSTEM **system, unsigned int headerversion);
FMOD_RESULT FMOD_Studio_Bank_GetSampleLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state);
FMOD_RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_LOADING_STATE *state);
FMOD_RESULT FMOD_Studio_Bank_GetLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state);
FMOD_RESULT FMOD_Studio_EventInstance_GetPlaybackState(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PLAYBACK_STATE *state);
FMOD_RESULT FMOD_Studio_CommandReplay_GetPlaybackState(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_PLAYBACK_STATE *state);
FMOD_RESULT FMOD_Sound_GetOpenState (FMOD_SOUND *sound, FMOD_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD_BOOL *starving, FMOD_BOOL *diskbusy);
FMOD_RESULT FMOD_ChannelGroup_GetMute (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *mute);
FMOD_RESULT FMOD_Studio_Bus_GetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL *mute);
FMOD_RESULT FMOD_ChannelGroup_SetMute (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL mute);
FMOD_RESULT FMOD_Studio_Bus_SetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL mute);
FMOD_RESULT FMOD_Studio_EventInstance_TriggerCue(FMOD_STUDIO_EVENTINSTANCE *eventinstance);
FMOD_RESULT FMOD_Studio_EventDescription_HasCue(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *cue);
FMOD_RESULT FMOD_Geometry_Save (FMOD_GEOMETRY *geometry, void *data, int *datasize);
FMOD_RESULT FMOD_Reverb3D_GetActive (FMOD_REVERB3D *reverb3d, FMOD_BOOL *active);
FMOD_RESULT FMOD_DSP_GetActive (FMOD_DSP *dsp, FMOD_BOOL *active);
FMOD_RESULT FMOD_Geometry_GetActive (FMOD_GEOMETRY *geometry, FMOD_BOOL *active);
FMOD_RESULT FMOD_Reverb3D_SetActive (FMOD_REVERB3D *reverb3d, FMOD_BOOL active);
FMOD_RESULT FMOD_DSP_SetActive (FMOD_DSP *dsp, FMOD_BOOL active);
FMOD_RESULT FMOD_Geometry_SetActive (FMOD_GEOMETRY *geometry, FMOD_BOOL active);
FMOD_RESULT FMOD_Studio_EventDescription_GetSoundSize(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *size);
FMOD_RESULT FMOD_System_GetDSPBufferSize (FMOD_SYSTEM *system, unsigned int *bufferlength, int *numbuffers);
FMOD_RESULT FMOD_System_SetDSPBufferSize (FMOD_SYSTEM *system, unsigned int bufferlength, int numbuffers);
FMOD_RESULT FMOD_System_GetStreamBufferSize (FMOD_SYSTEM *system, unsigned int *filebuffersize, FMOD_TIMEUNIT *filebuffersizetype);
FMOD_RESULT FMOD_System_SetStreamBufferSize (FMOD_SYSTEM *system, unsigned int filebuffersize, FMOD_TIMEUNIT filebuffersizetype);
FMOD_RESULT FMOD_Debug_Initialize (FMOD_DEBUG_FLAGS flags, FMOD_DEBUG_MODE mode, FMOD_DEBUG_CALLBACK callback, const char *filename);
FMOD_RESULT FMOD_Studio_System_Initialize(FMOD_STUDIO_SYSTEM *system, int maxchannels, FMOD_STUDIO_INITFLAGS studioflags, FMOD_INITFLAGS flags, void *extradriverdata);
FMOD_RESULT FMOD_Memory_Initialize (void *poolmem, int poollen, FMOD_MEMORY_ALLOC_CALLBACK useralloc, FMOD_MEMORY_REALLOC_CALLBACK userrealloc, FMOD_MEMORY_FREE_CALLBACK userfree, FMOD_MEMORY_TYPE memtypeflags);
FMOD_RESULT FMOD_Sound_Get3DCustomRolloff (FMOD_SOUND *sound, FMOD_VECTOR **points, int *numpoints);
FMOD_RESULT FMOD_ChannelGroup_Get3DCustomRolloff (FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR **points, int *numpoints);
FMOD_RESULT FMOD_Sound_Set3DCustomRolloff (FMOD_SOUND *sound, FMOD_VECTOR *points, int numpoints);
FMOD_RESULT FMOD_ChannelGroup_Set3DCustomRolloff (FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *points, int numpoints);
FMOD_RESULT FMOD_Sound_GetTag (FMOD_SOUND *sound, const char *name, int index, FMOD_TAG *tag);
FMOD_RESULT FMOD_Studio_System_FlushSampleLoading(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_System_IsRecording (FMOD_SYSTEM *system, int id, FMOD_BOOL *recording);
FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandString(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, char *buffer, int length);
FMOD_RESULT FMOD_SoundGroup_GetNumPlaying (FMOD_SOUNDGROUP *soundgroup, int *numplaying);
FMOD_RESULT FMOD_ChannelGroup_IsPlaying (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *isplaying);
FMOD_RESULT FMOD_System_GetChannelsPlaying (FMOD_SYSTEM *system, int *channels, int *realchannels);
FMOD_RESULT FMOD_DSP_ShowConfigDialog (FMOD_DSP *dsp, void *hwnd, FMOD_BOOL show);
FMOD_RESULT FMOD_Studio_EventInstance_GetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *pitch, float *finalpitch);
FMOD_RESULT FMOD_ChannelGroup_GetPitch (FMOD_CHANNELGROUP *channelgroup, float *pitch);
FMOD_RESULT FMOD_Studio_EventInstance_SetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float pitch);
FMOD_RESULT FMOD_ChannelGroup_SetPitch (FMOD_CHANNELGROUP *channelgroup, float pitch);
FMOD_RESULT FMOD_Studio_CommandReplay_SetBankPath(FMOD_STUDIO_COMMANDREPLAY *replay, const char *bankPath);
FMOD_RESULT FMOD_System_SetPluginPath (FMOD_SYSTEM *system, const char *path);
FMOD_RESULT FMOD_Studio_System_LookupPath(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_Studio_VCA_GetPath(FMOD_STUDIO_VCA *vca, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_Studio_Bank_GetPath(FMOD_STUDIO_BANK *bank, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_Studio_EventDescription_GetPath(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_Studio_Bus_GetPath(FMOD_STUDIO_BUS *bus, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_Sound_GetLength (FMOD_SOUND *sound, unsigned int *length, FMOD_TIMEUNIT lengthtype);
FMOD_RESULT FMOD_Studio_EventDescription_GetLength(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *length);
FMOD_RESULT FMOD_Studio_CommandReplay_GetLength(FMOD_STUDIO_COMMANDREPLAY *replay, float *length);
FMOD_RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback);
FMOD_RESULT FMOD_Studio_CommandReplay_SetFrameCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK callback);
FMOD_RESULT FMOD_System_Set3DRolloffCallback (FMOD_SYSTEM *system, FMOD_3D_ROLLOFF_CALLBACK callback);
FMOD_RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK callback);
FMOD_RESULT FMOD_Studio_EventInstance_SetCallback(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask);
FMOD_RESULT FMOD_System_SetCallback (FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK callback, FMOD_SYSTEM_CALLBACK_TYPE callbackmask);
FMOD_RESULT FMOD_Studio_System_SetCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK callback, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE callbackmask);
FMOD_RESULT FMOD_Studio_EventDescription_SetCallback(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask);
FMOD_RESULT FMOD_ChannelGroup_SetCallback (FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELCONTROL_CALLBACK callback);
FMOD_RESULT FMOD_Sound_Lock (FMOD_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2);
FMOD_RESULT FMOD_ChannelGroup_GetDSPClock (FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock);
FMOD_RESULT FMOD_Sound_Unlock (FMOD_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2);
FMOD_RESULT FMOD_Studio_System_GetBank(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BANK **bank);
FMOD_RESULT FMOD_Studio_EventInstance_GetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *mask);
FMOD_RESULT FMOD_Studio_EventInstance_SetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int mask);
FMOD_RESULT FMOD_Studio_EventInstance_IsVirtual(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *virtualstate);
FMOD_RESULT FMOD_Channel_IsVirtual (FMOD_CHANNEL *channel, FMOD_BOOL *isvirtual);
FMOD_RESULT FMOD_System_GetChannel (FMOD_SYSTEM *system, int channelid, FMOD_CHANNEL **channel);
FMOD_RESULT FMOD_ChannelGroup_GetChannel (FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNEL **channel);
FMOD_RESULT FMOD_ChannelGroup_Get3DLevel (FMOD_CHANNELGROUP *channelgroup, float *level);
FMOD_RESULT FMOD_ChannelGroup_Set3DLevel (FMOD_CHANNELGROUP *channelgroup, float level);
FMOD_RESULT FMOD_Studio_EventInstance_GetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float *level);
FMOD_RESULT FMOD_Studio_EventInstance_SetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float level);
FMOD_RESULT FMOD_ChannelGroup_Get3DDopplerLevel (FMOD_CHANNELGROUP *channelgroup, float *level);
FMOD_RESULT FMOD_ChannelGroup_Set3DDopplerLevel (FMOD_CHANNELGROUP *channelgroup, float level);
FMOD_RESULT FMOD_Studio_System_UnloadAll(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_DSP_DisconnectAll (FMOD_DSP *dsp, FMOD_BOOL inputs, FMOD_BOOL outputs);
FMOD_RESULT FMOD_DSP_GetParameterBool (FMOD_DSP *dsp, int index, FMOD_BOOL *value, char *valuestr, int valuestrlen);
FMOD_RESULT FMOD_DSP_SetParameterBool (FMOD_DSP *dsp, int index, FMOD_BOOL value);
FMOD_RESULT FMOD_System_CreateStream (FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound);
FMOD_RESULT FMOD_Studio_EventDescription_IsStream(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *isStream);
FMOD_RESULT FMOD_System_AttachFileSystem (FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek);
FMOD_RESULT FMOD_System_SetFileSystem (FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek, FMOD_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign);
FMOD_RESULT FMOD_Studio_CommandReplay_GetSystem(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_SYSTEM **system);
FMOD_RESULT FMOD_DSP_DisconnectFrom (FMOD_DSP *dsp, FMOD_DSP *target, FMOD_DSPCONNECTION *connection);
FMOD_RESULT FMOD_Studio_System_LoadBankCustom(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_BANK_INFO *info, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank);
FMOD_RESULT FMOD_ChannelGroup_SetPan (FMOD_CHANNELGROUP *channelgroup, float pan);
FMOD_RESULT FMOD_ChannelGroup_GetLowPassGain (FMOD_CHANNELGROUP *channelgroup, float *gain);
FMOD_RESULT FMOD_ChannelGroup_SetLowPassGain (FMOD_CHANNELGROUP *channelgroup, float gain);
FMOD_RESULT FMOD_System_LoadPlugin (FMOD_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority);
FMOD_RESULT FMOD_System_UnloadPlugin (FMOD_SYSTEM *system, unsigned int handle);
FMOD_RESULT FMOD_System_GetNestedPlugin (FMOD_SYSTEM *system, unsigned int handle, int index, unsigned int *nestedhandle);
FMOD_RESULT FMOD_System_CreateDSPByPlugin (FMOD_SYSTEM *system, unsigned int handle, FMOD_DSP **dsp);
FMOD_RESULT FMOD_System_GetDSPInfoByPlugin (FMOD_SYSTEM *system, unsigned int handle, const FMOD_DSP_DESCRIPTION **description);
FMOD_RESULT FMOD_System_GetOutputByPlugin (FMOD_SYSTEM *system, unsigned int *handle);
FMOD_RESULT FMOD_System_SetOutputByPlugin (FMOD_SYSTEM *system, unsigned int handle);
FMOD_RESULT FMOD_Geometry_AddPolygon (FMOD_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided, int numvertices, const FMOD_VECTOR *vertices, int *polygonindex);
FMOD_RESULT FMOD_System_GetVersion (FMOD_SYSTEM *system, unsigned int *version);
FMOD_RESULT FMOD_ChannelGroup_Get3DOcclusion (FMOD_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion);
FMOD_RESULT FMOD_ChannelGroup_Set3DOcclusion (FMOD_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion);
FMOD_RESULT FMOD_System_GetGeometryOcclusion (FMOD_SYSTEM *system, const FMOD_VECTOR *listener, const FMOD_VECTOR *source, float *direct, float *reverb);
FMOD_RESULT FMOD_ChannelGroup_Get3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation);
FMOD_RESULT FMOD_ChannelGroup_Set3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation);
FMOD_RESULT FMOD_Geometry_GetRotation (FMOD_GEOMETRY *geometry, FMOD_VECTOR *forward, FMOD_VECTOR *up);
FMOD_RESULT FMOD_Geometry_SetRotation (FMOD_GEOMETRY *geometry, const FMOD_VECTOR *forward, const FMOD_VECTOR *up);
FMOD_RESULT FMOD_System_GetRecordPosition (FMOD_SYSTEM *system, int id, unsigned int *position);
FMOD_RESULT FMOD_Studio_EventInstance_GetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int *position);
FMOD_RESULT FMOD_Studio_EventInstance_SetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int position);
FMOD_RESULT FMOD_System_GetSpeakerPosition (FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float *x, float *y, FMOD_BOOL *active);
FMOD_RESULT FMOD_System_SetSpeakerPosition (FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float x, float y, FMOD_BOOL active);
FMOD_RESULT FMOD_Channel_GetPosition (FMOD_CHANNEL *channel, unsigned int *position, FMOD_TIMEUNIT postype);
FMOD_RESULT FMOD_Geometry_GetPosition (FMOD_GEOMETRY *geometry, FMOD_VECTOR *position);
FMOD_RESULT FMOD_Channel_SetPosition (FMOD_CHANNEL *channel, unsigned int position, FMOD_TIMEUNIT postype);
FMOD_RESULT FMOD_Geometry_SetPosition (FMOD_GEOMETRY *geometry, const FMOD_VECTOR *position);
FMOD_RESULT FMOD_Studio_EventInstance_GetDescription(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENTDESCRIPTION **description);
FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandInfo(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_COMMAND_INFO *info);
FMOD_RESULT FMOD_Studio_System_GetSoundInfo(FMOD_STUDIO_SYSTEM *system, const char *key, FMOD_STUDIO_SOUND_INFO *info);
FMOD_RESULT FMOD_DSP_GetMeteringInfo (FMOD_DSP *dsp, FMOD_DSP_METERING_INFO *inputInfo, FMOD_DSP_METERING_INFO *outputInfo);
FMOD_RESULT FMOD_Studio_Bank_GetStringInfo(FMOD_STUDIO_BANK *bank, int index, FMOD_GUID *id, char *path, int size, int *retrieved);
FMOD_RESULT FMOD_System_GetPluginInfo (FMOD_SYSTEM *system, unsigned int handle, FMOD_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version);
FMOD_RESULT FMOD_DSP_GetParameterInfo (FMOD_DSP *dsp, int index, FMOD_DSP_PARAMETER_DESC **desc);
FMOD_RESULT FMOD_System_GetRecordDriverInfo (FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD_DRIVER_STATE *state);
FMOD_RESULT FMOD_System_GetDriverInfo (FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels);
FMOD_RESULT FMOD_DSP_GetInfo (FMOD_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight);
FMOD_RESULT FMOD_Sound_GetSyncPointInfo (FMOD_SOUND *sound, FMOD_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD_TIMEUNIT offsettype);
FMOD_RESULT FMOD_ChannelGroup_GetVolumeRamp (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *ramp);
FMOD_RESULT FMOD_ChannelGroup_SetVolumeRamp (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL ramp);
FMOD_RESULT FMOD_ChannelGroup_SetFadePointRamp (FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume);
FMOD_RESULT FMOD_Studio_EventInstance_Stop(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_STOP_MODE mode);
FMOD_RESULT FMOD_SoundGroup_Stop (FMOD_SOUNDGROUP *soundgroup);
FMOD_RESULT FMOD_ChannelGroup_Stop (FMOD_CHANNELGROUP *channelgroup);
FMOD_RESULT FMOD_Studio_CommandReplay_Stop(FMOD_STUDIO_COMMANDREPLAY *replay);
FMOD_RESULT FMOD_System_RecordStop (FMOD_SYSTEM *system, int id);
FMOD_RESULT FMOD_ChannelGroup_AddGroup (FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP *group, FMOD_BOOL propagatedspclock, FMOD_DSPCONNECTION **connection);
FMOD_RESULT FMOD_System_CreateSoundGroup (FMOD_SYSTEM *system, const char *name, FMOD_SOUNDGROUP **soundgroup);
FMOD_RESULT FMOD_System_GetMasterSoundGroup (FMOD_SYSTEM *system, FMOD_SOUNDGROUP **soundgroup);
FMOD_RESULT FMOD_Sound_GetSoundGroup (FMOD_SOUND *sound, FMOD_SOUNDGROUP **soundgroup);
FMOD_RESULT FMOD_Sound_SetSoundGroup (FMOD_SOUND *sound, FMOD_SOUNDGROUP *soundgroup);
FMOD_RESULT FMOD_System_CreateChannelGroup (FMOD_SYSTEM *system, const char *name, FMOD_CHANNELGROUP **channelgroup);
FMOD_RESULT FMOD_Studio_Bus_LockChannelGroup(FMOD_STUDIO_BUS *bus);
FMOD_RESULT FMOD_Studio_Bus_UnlockChannelGroup(FMOD_STUDIO_BUS *bus);
FMOD_RESULT FMOD_System_GetMasterChannelGroup (FMOD_SYSTEM *system, FMOD_CHANNELGROUP **channelgroup);
FMOD_RESULT FMOD_Studio_EventInstance_GetChannelGroup(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_CHANNELGROUP **group);
FMOD_RESULT FMOD_Channel_GetChannelGroup (FMOD_CHANNEL *channel, FMOD_CHANNELGROUP **channelgroup);
FMOD_RESULT FMOD_Studio_Bus_GetChannelGroup(FMOD_STUDIO_BUS *bus, FMOD_CHANNELGROUP **group);
FMOD_RESULT FMOD_Channel_SetChannelGroup (FMOD_CHANNEL *channel, FMOD_CHANNELGROUP *channelgroup);
FMOD_RESULT FMOD_ChannelGroup_GetGroup (FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNELGROUP **group);
FMOD_RESULT FMOD_ChannelGroup_GetParentGroup (FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP **group);
FMOD_RESULT FMOD_ChannelGroup_Get3DDistanceFilter (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *custom, float *customLevel, float *centerFreq);
FMOD_RESULT FMOD_ChannelGroup_Set3DDistanceFilter (FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL custom, float customLevel, float centerFreq);
FMOD_RESULT FMOD_System_GetDriver (FMOD_SYSTEM *system, int *driver);
FMOD_RESULT FMOD_System_SetDriver (FMOD_SYSTEM *system, int driver);
FMOD_RESULT FMOD_SoundGroup_GetMaxAudibleBehavior (FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR *behavior);
FMOD_RESULT FMOD_SoundGroup_SetMaxAudibleBehavior (FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR behavior);
FMOD_RESULT FMOD_ChannelGroup_GetNumDSPs (FMOD_CHANNELGROUP *channelgroup, int *numdsps);
FMOD_RESULT FMOD_Studio_System_FlushCommands(FMOD_STUDIO_SYSTEM *system);
FMOD_RESULT FMOD_Sound_GetNumSubSounds (FMOD_SOUND *sound, int *numsubsounds);
FMOD_RESULT FMOD_SoundGroup_GetNumSounds (FMOD_SOUNDGROUP *soundgroup, int *numsounds);
FMOD_RESULT FMOD_Geometry_GetPolygonNumVertices (FMOD_GEOMETRY *geometry, int index, int *numvertices);
FMOD_RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription);
FMOD_RESULT FMOD_System_GetReverbProperties (FMOD_SYSTEM *system, int instance, FMOD_REVERB_PROPERTIES *prop);
FMOD_RESULT FMOD_ChannelGroup_GetReverbProperties (FMOD_CHANNELGROUP *channelgroup, int instance, float *wet);
FMOD_RESULT FMOD_System_SetReverbProperties (FMOD_SYSTEM *system, int instance, const FMOD_REVERB_PROPERTIES *prop);
FMOD_RESULT FMOD_ChannelGroup_SetReverbProperties (FMOD_CHANNELGROUP *channelgroup, int instance, float wet);
FMOD_RESULT FMOD_Reverb3D_GetProperties (FMOD_REVERB3D *reverb3d, FMOD_REVERB_PROPERTIES *properties);
FMOD_RESULT FMOD_Reverb3D_SetProperties (FMOD_REVERB3D *reverb3d, const FMOD_REVERB_PROPERTIES *properties);
FMOD_RESULT FMOD_Reverb3D_Get3DAttributes (FMOD_REVERB3D *reverb3d, FMOD_VECTOR *position, float *mindistance, float *maxdistance);
FMOD_RESULT FMOD_Studio_EventInstance_Get3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes);
FMOD_RESULT FMOD_ChannelGroup_Get3DAttributes (FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *pos, FMOD_VECTOR *vel);
FMOD_RESULT FMOD_Reverb3D_Set3DAttributes (FMOD_REVERB3D *reverb3d, const FMOD_VECTOR *position, float mindistance, float maxdistance);
FMOD_RESULT FMOD_Studio_EventInstance_Set3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes);
FMOD_RESULT FMOD_ChannelGroup_Set3DAttributes (FMOD_CHANNELGROUP *channelgroup, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel);
FMOD_RESULT FMOD_Geometry_GetPolygonAttributes (FMOD_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD_BOOL *doublesided);
FMOD_RESULT FMOD_Geometry_SetPolygonAttributes (FMOD_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided);
FMOD_RESULT FMOD_System_Get3DListenerAttributes (FMOD_SYSTEM *system, int listener, FMOD_VECTOR *pos, FMOD_VECTOR *vel, FMOD_VECTOR *forward, FMOD_VECTOR *up);
FMOD_RESULT FMOD_System_Set3DListenerAttributes (FMOD_SYSTEM *system, int listener, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel, const FMOD_VECTOR *forward, const FMOD_VECTOR *up);
FMOD_RESULT FMOD_Studio_System_GetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, FMOD_3D_ATTRIBUTES *attributes, FMOD_VECTOR *attenuationposition);
FMOD_RESULT FMOD_Studio_System_SetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, const FMOD_3D_ATTRIBUTES *attributes, const FMOD_VECTOR *attenuationposition);
FMOD_RESULT FMOD_Sound_GetNumTags (FMOD_SOUND *sound, int *numtags, int *numtagsupdated);
FMOD_RESULT FMOD_System_Get3DSettings (FMOD_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale);
FMOD_RESULT FMOD_System_Set3DSettings (FMOD_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale);
FMOD_RESULT FMOD_System_GetAdvancedSettings (FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings);
FMOD_RESULT FMOD_Studio_System_GetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings);
FMOD_RESULT FMOD_System_SetAdvancedSettings (FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings);
FMOD_RESULT FMOD_Studio_System_SetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings);
FMOD_RESULT FMOD_Sound_Get3DConeSettings (FMOD_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume);
FMOD_RESULT FMOD_ChannelGroup_Get3DConeSettings (FMOD_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume);
FMOD_RESULT FMOD_Sound_Set3DConeSettings (FMOD_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume);
FMOD_RESULT FMOD_ChannelGroup_Set3DConeSettings (FMOD_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume);
FMOD_RESULT FMOD_System_GetGeometrySettings (FMOD_SYSTEM *system, float *maxworldsize);
FMOD_RESULT FMOD_System_SetGeometrySettings (FMOD_SYSTEM *system, float maxworldsize);
FMOD_RESULT FMOD_System_GetSpeakerModeChannels (FMOD_SYSTEM *system, FMOD_SPEAKERMODE mode, int *channels);
FMOD_RESULT FMOD_System_GetSoftwareChannels (FMOD_SYSTEM *system, int *numsoftwarechannels);
FMOD_RESULT FMOD_System_SetSoftwareChannels (FMOD_SYSTEM *system, int numsoftwarechannels);
FMOD_RESULT FMOD_Sound_GetMusicNumChannels (FMOD_SOUND *sound, int *numchannels);
FMOD_RESULT FMOD_ChannelGroup_GetNumChannels (FMOD_CHANNELGROUP *channelgroup, int *numchannels);
FMOD_RESULT FMOD_System_GetNumNestedPlugins (FMOD_SYSTEM *system, unsigned int handle, int *count);
FMOD_RESULT FMOD_System_GetNumPlugins (FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int *numplugins);
FMOD_RESULT FMOD_Geometry_GetNumPolygons (FMOD_GEOMETRY *geometry, int *numpolygons);
FMOD_RESULT FMOD_Geometry_GetMaxPolygons (FMOD_GEOMETRY *geometry, int *maxpolygons, int *maxvertices);
FMOD_RESULT FMOD_ChannelGroup_GetNumGroups (FMOD_CHANNELGROUP *channelgroup, int *numgroups);
FMOD_RESULT FMOD_System_Get3DNumListeners (FMOD_SYSTEM *system, int *numlisteners);
FMOD_RESULT FMOD_System_Set3DNumListeners (FMOD_SYSTEM *system, int numlisteners);
FMOD_RESULT FMOD_Studio_System_GetNumListeners(FMOD_STUDIO_SYSTEM *system, int *numlisteners);
FMOD_RESULT FMOD_Studio_System_SetNumListeners(FMOD_STUDIO_SYSTEM *system, int numlisteners);
FMOD_RESULT FMOD_DSP_GetNumParameters (FMOD_DSP *dsp, int *numparams);
FMOD_RESULT FMOD_System_GetRecordNumDrivers (FMOD_SYSTEM *system, int *numdrivers, int *numconnected);
FMOD_RESULT FMOD_System_GetNumDrivers (FMOD_SYSTEM *system, int *numdrivers);
FMOD_RESULT FMOD_DSP_GetBypass (FMOD_DSP *dsp, FMOD_BOOL *bypass);
FMOD_RESULT FMOD_DSP_SetBypass (FMOD_DSP *dsp, FMOD_BOOL bypass);
FMOD_RESULT FMOD_Memory_GetStats (int *currentalloced, int *maxalloced, FMOD_BOOL blocking);
FMOD_RESULT FMOD_Sound_GetDefaults (FMOD_SOUND *sound, float *frequency, int *priority);
FMOD_RESULT FMOD_Sound_SetDefaults (FMOD_SOUND *sound, float frequency, int priority);
FMOD_RESULT FMOD_Studio_Bus_StopAllEvents(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_STOP_MODE mode);
FMOD_RESULT FMOD_Sound_GetNumSyncPoints (FMOD_SOUND *sound, int *numsyncpoints);
FMOD_RESULT FMOD_ChannelGroup_RemoveFadePoints (FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end);
FMOD_RESULT FMOD_ChannelGroup_GetFadePoints (FMOD_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume);
FMOD_RESULT FMOD_Sound_GetLoopPoints (FMOD_SOUND *sound, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype);
FMOD_RESULT FMOD_Channel_GetLoopPoints (FMOD_CHANNEL *channel, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype);
FMOD_RESULT FMOD_Sound_SetLoopPoints (FMOD_SOUND *sound, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype);
FMOD_RESULT FMOD_Channel_SetLoopPoints (FMOD_CHANNEL *channel, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype);
FMOD_RESULT FMOD_DSP_GetNumInputs (FMOD_DSP *dsp, int *numinputs);
FMOD_RESULT FMOD_DSP_GetNumOutputs (FMOD_DSP *dsp, int *numoutputs);
FMOD_RESULT FMOD_Studio_System_GetBus(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BUS **bus);
FMOD_RESULT FMOD_System_GetSoftwareFormat (FMOD_SYSTEM *system, int *samplerate, FMOD_SPEAKERMODE *speakermode, int *numrawspeakers);
FMOD_RESULT FMOD_System_SetSoftwareFormat (FMOD_SYSTEM *system, int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers);
FMOD_RESULT FMOD_DSP_GetChannelFormat (FMOD_DSP *dsp, FMOD_CHANNELMASK *channelmask, int *numchannels, FMOD_SPEAKERMODE *source_speakermode);
FMOD_RESULT FMOD_DSP_SetChannelFormat (FMOD_DSP *dsp, FMOD_CHANNELMASK channelmask, int numchannels, FMOD_SPEAKERMODE source_speakermode);
FMOD_RESULT FMOD_DSP_GetOutputChannelFormat (FMOD_DSP *dsp, FMOD_CHANNELMASK inmask, int inchannels, FMOD_SPEAKERMODE inspeakermode, FMOD_CHANNELMASK *outmask, int *outchannels, FMOD_SPEAKERMODE *outspeakermode);
FMOD_RESULT FMOD_Sound_GetFormat (FMOD_SOUND *sound, FMOD_SOUND_TYPE *type, FMOD_SOUND_FORMAT *format, int *channels, int *bits);
FMOD_RESULT FMOD_DSP_GetParameterFloat (FMOD_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen);
FMOD_RESULT FMOD_DSP_SetParameterFloat (FMOD_DSP *dsp, int index, float value);
FMOD_RESULT FMOD_DSP_GetSystemObject (FMOD_DSP *dsp, FMOD_SYSTEM **system);
FMOD_RESULT FMOD_Sound_GetSystemObject (FMOD_SOUND *sound, FMOD_SYSTEM **system);
FMOD_RESULT FMOD_SoundGroup_GetSystemObject (FMOD_SOUNDGROUP *soundgroup, FMOD_SYSTEM **system);
FMOD_RESULT FMOD_ChannelGroup_GetSystemObject (FMOD_CHANNELGROUP *channelgroup, FMOD_SYSTEM **system);
FMOD_RESULT FMOD_DSP_Reset (FMOD_DSP *dsp);
FMOD_RESULT FMOD_Studio_System_GetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float *weight);
FMOD_RESULT FMOD_Studio_System_SetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float weight);
FMOD_RESULT FMOD_System_Init (FMOD_SYSTEM *system, int maxchannels, FMOD_INITFLAGS flags, void *extradriverdata);
FMOD_RESULT FMOD_DSP_GetParameterInt (FMOD_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen);
FMOD_RESULT FMOD_DSP_SetParameterInt (FMOD_DSP *dsp, int index, int value);
FMOD_RESULT FMOD_Sound_GetSubSoundParent (FMOD_SOUND *sound, FMOD_SOUND **parentsound);
FMOD_RESULT FMOD_Studio_System_GetEvent(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_EVENTDESCRIPTION **event);
FMOD_RESULT FMOD_Sound_AddSyncPoint (FMOD_SOUND *sound, unsigned int offset, FMOD_TIMEUNIT offsettype, const char *name, FMOD_SYNCPOINT **point);
FMOD_RESULT FMOD_Sound_DeleteSyncPoint (FMOD_SOUND *sound, FMOD_SYNCPOINT *point);
FMOD_RESULT FMOD_Sound_GetSyncPoint (FMOD_SOUND *sound, int index, FMOD_SYNCPOINT **point);
FMOD_RESULT FMOD_ChannelGroup_AddFadePoint (FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume);
FMOD_RESULT FMOD_Studio_Bank_GetVCACount(FMOD_STUDIO_BANK *bank, int *count);
FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandCount(FMOD_STUDIO_COMMANDREPLAY *replay, int *count);
FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count);
FMOD_RESULT FMOD_Studio_Bank_GetStringCount(FMOD_STUDIO_BANK *bank, int *count);
FMOD_RESULT FMOD_Studio_System_GetBankCount(FMOD_STUDIO_SYSTEM *system, int *count);
FMOD_RESULT FMOD_Sound_GetLoopCount (FMOD_SOUND *sound, int *loopcount);
FMOD_RESULT FMOD_Channel_GetLoopCount (FMOD_CHANNEL *channel, int *loopcount);
FMOD_RESULT FMOD_Sound_SetLoopCount (FMOD_SOUND *sound, int loopcount);
FMOD_RESULT FMOD_Channel_SetLoopCount (FMOD_CHANNEL *channel, int loopcount);
FMOD_RESULT FMOD_Studio_Bank_GetBusCount(FMOD_STUDIO_BANK *bank, int *count);
FMOD_RESULT FMOD_Studio_Bank_GetEventCount(FMOD_STUDIO_BANK *bank, int *count);
FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count);
FMOD_RESULT FMOD_Studio_EventDescription_IsOneshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *oneshot);
FMOD_RESULT FMOD_Studio_EventDescription_IsSnapshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *snapshot);
FMOD_RESULT FMOD_Studio_EventInstance_Start(FMOD_STUDIO_EVENTINSTANCE *eventinstance);
FMOD_RESULT FMOD_Studio_CommandReplay_Start(FMOD_STUDIO_COMMANDREPLAY *replay);
FMOD_RESULT FMOD_System_RecordStart (FMOD_SYSTEM *system, int id, FMOD_SOUND *sound, FMOD_BOOL loop);
FMOD_RESULT FMOD_System_DetachChannelGroupFromPort(FMOD_SYSTEM *system, FMOD_CHANNELGROUP *channelgroup);
FMOD_RESULT FMOD_System_AttachChannelGroupToPort (FMOD_SYSTEM *system, FMOD_PORT_TYPE portType, FMOD_PORT_INDEX portIndex, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL passThru);
FMOD_RESULT FMOD_Studio_Bank_GetVCAList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_VCA **array, int capacity, int *count);
FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceList(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **array, int capacity, int *count);
FMOD_RESULT FMOD_Studio_System_GetBankList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BANK **array, int capacity, int *count);
FMOD_RESULT FMOD_Studio_Bank_GetBusList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_BUS **array, int capacity, int *count);
FMOD_RESULT FMOD_Studio_Bank_GetEventList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_EVENTDESCRIPTION **array, int capacity, int *count);
FMOD_RESULT FMOD_System_GetNetworkTimeout (FMOD_SYSTEM *system, int *timeout);
FMOD_RESULT FMOD_System_SetNetworkTimeout (FMOD_SYSTEM *system, int timeout);
FMOD_RESULT FMOD_DSP_AddInput (FMOD_DSP *dsp, FMOD_DSP *input, FMOD_DSPCONNECTION **connection, FMOD_DSPCONNECTION_TYPE type);
FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsInput (FMOD_CHANNELGROUP *channelgroup, float *levels, int numlevels);
FMOD_RESULT FMOD_DSP_GetInput (FMOD_DSP *dsp, int index, FMOD_DSP **input, FMOD_DSPCONNECTION **inputconnection);
FMOD_RESULT FMOD_DSPConnection_GetInput (FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **input);
FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsOutput (FMOD_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
FMOD_RESULT FMOD_DSP_GetOutput (FMOD_DSP *dsp, int index, FMOD_DSP **output, FMOD_DSPCONNECTION **outputconnection);
FMOD_RESULT FMOD_System_GetOutput (FMOD_SYSTEM *system, FMOD_OUTPUTTYPE *output);
FMOD_RESULT FMOD_DSPConnection_GetOutput (FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **output);
FMOD_RESULT FMOD_System_SetOutput (FMOD_SYSTEM *system, FMOD_OUTPUTTYPE output);
FMOD_RESULT FMOD_ChannelGroup_GetDSPIndex (FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int *index);
FMOD_RESULT FMOD_ChannelGroup_SetDSPIndex (FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int index);
FMOD_RESULT FMOD_DSP_GetDataParameterIndex (FMOD_DSP *dsp, int datatype, int *index);
FMOD_RESULT FMOD_Channel_GetIndex (FMOD_CHANNEL *channel, int *index);
FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_USER_PROPERTY *property);
FMOD_RESULT FMOD_Geometry_GetPolygonVertex (FMOD_GEOMETRY *geometry, int index, int vertexindex, FMOD_VECTOR *vertex);
FMOD_RESULT FMOD_Geometry_SetPolygonVertex (FMOD_GEOMETRY *geometry, int index, int vertexindex, const FMOD_VECTOR *vertex);
FMOD_RESULT FMOD_DSPConnection_GetMix (FMOD_DSPCONNECTION *dspconnection, float *volume);
FMOD_RESULT FMOD_DSPConnection_SetMix (FMOD_DSPCONNECTION *dspconnection, float volume);
FMOD_RESULT FMOD_DSP_GetWetDryMix (FMOD_DSP *dsp, float *prewet, float *postwet, float *dry);
FMOD_RESULT FMOD_DSP_SetWetDryMix (FMOD_DSP *dsp, float prewet, float postwet, float dry);
FMOD_RESULT FMOD_DSPConnection_GetMixMatrix (FMOD_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop);
FMOD_RESULT FMOD_ChannelGroup_GetMixMatrix (FMOD_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop);
FMOD_RESULT FMOD_DSPConnection_SetMixMatrix (FMOD_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop);
FMOD_RESULT FMOD_ChannelGroup_SetMixMatrix (FMOD_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop);
FMOD_RESULT FMOD_System_GetDefaultMixMatrix (FMOD_SYSTEM *system, FMOD_SPEAKERMODE sourcespeakermode, FMOD_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop);
FMOD_RESULT FMOD_ChannelGroup_GetDelay (FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels);
FMOD_RESULT FMOD_ChannelGroup_SetDelay (FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels);
FMOD_RESULT FMOD_Studio_System_LoadCommandReplay(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDREPLAY_FLAGS flags, FMOD_STUDIO_COMMANDREPLAY **replay);
FMOD_RESULT FMOD_Channel_GetFrequency (FMOD_CHANNEL *channel, float *frequency);
FMOD_RESULT FMOD_Channel_SetFrequency (FMOD_CHANNEL *channel, float frequency);
FMOD_RESULT FMOD_Studio_System_LoadBankMemory(FMOD_STUDIO_SYSTEM *system, const char *buffer, int length, FMOD_STUDIO_LOAD_MEMORY_MODE mode, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank);
FMOD_RESULT FMOD_System_LoadGeometry (FMOD_SYSTEM *system, const void *data, int datasize, FMOD_GEOMETRY **geometry);
FMOD_RESULT FMOD_System_CreateGeometry (FMOD_SYSTEM *system, int maxpolygons, int maxvertices, FMOD_GEOMETRY **geometry);
FMOD_RESULT FMOD_ChannelGroup_GetAudibility (FMOD_CHANNELGROUP *channelgroup, float *audibility);
FMOD_RESULT FMOD_Channel_GetPriority (FMOD_CHANNEL *channel, int *priority);
FMOD_RESULT FMOD_Channel_SetPriority (FMOD_CHANNEL *channel, int priority);
FMOD_RESULT FMOD_Studio_EventDescription_GetUserProperty(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_USER_PROPERTY *property);
FMOD_RESULT FMOD_Studio_EventInstance_GetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float *value);
FMOD_RESULT FMOD_Studio_EventInstance_SetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float value);
FMOD_RESULT FMOD_System_GetNetworkProxy (FMOD_SYSTEM *system, char *proxy, int proxylen);
FMOD_RESULT FMOD_System_SetNetworkProxy (FMOD_SYSTEM *system, const char *proxy);

// deprecated APIs:
FMOD_RESULT FMOD_Studio_System_GetLowLevelSystem(FMOD_STUDIO_SYSTEM *system, FMOD_SYSTEM **lowLevelSystem);
FMOD_RESULT FMOD_Studio_EventInstance_SetParameterValue(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float value);
#if 0
FMOD_RESULT FMOD_System_GetSoundRAM(FMOD_SYSTEM *system, int *currentalloced, int *maxalloced, int *total);
FMOD_Studio_ParameterInstance_IsValid
FMOD_Studio_EventInstance_GetParameterValue
FMOD_Studio_ParameterInstance_GetValue
FMOD_Studio_ParameterInstance_SetValue
FMOD_Studio_ParameterInstance_GetDescription
FMOD_Studio_EventInstance_GetParameter
FMOD_Studio_EventDescription_GetParameter
FMOD_Studio_EventInstance_SetParameterValuesByIndices
FMOD_Studio_EventInstance_GetParameterCount
FMOD_Studio_EventDescription_GetParameterCount
FMOD_Studio_EventInstance_GetParameterValueByIndex
FMOD_Studio_EventInstance_SetParameterValueByIndex
FMOD_Studio_EventInstance_GetParameterByIndex
#endif

#endif //OPENFMOD_H
